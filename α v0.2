# ModuChat - Chatbot en interface console améliorée
# Créé par BitForge Studio
import sys
import time
from datetime import datetime
import random

# Variables globales
user_name = "User"
last_input = None

# Fonction pour les réponses du bot
def get_response(user_input):
    global user_name, last_input
    user_input = user_input.lower().strip()
    last_input = user_input  # Stocke la dernière entrée pour le contexte

    # Réponses avec variations aléatoires
    hello_replies = [
        f"Hey {user_name}, nice to see you! What’s on your mind?",
        f"Hi {user_name}! How can I make your day even better?",
        f"Hello {user_name}! What’s up?"
    ]
    how_are_you_replies = [
        f"I’m doing awesome, thanks for asking, {user_name}! How about you?",
        f"Great, as always! How’s {user_name} holding up?",
        f"I’m good, {user_name}! What’s your vibe today?"
    ]
    bye_replies = [
        f"See ya, {user_name}! Come back soon, okay?",
        f"Goodbye {user_name}, it’s been real!",
        f"Catch you later, {user_name}!"
    ]

    if "hello" in user_input or "hi" in user_input or "salut" in user_input:
        return random.choice(hello_replies)
    elif "how are you" in user_input or "comment vas-tu" in user_input:
        return random.choice(how_are_you_replies)
    elif "bye" in user_input or "exit" in user_input or "au revoir" in user_input:
        return random.choice(bye_replies)
    elif "help" in user_input or "aide" in user_input:
        return f"I’m ModuChat, created by BitForge Studio. Try 'hello', 'time', 'date', 'calc', 'setname', or just chat with me!"
    elif "time" in user_input or "heure" in user_input:
        return f"Current time: {datetime.now().strftime('%H:%M:%S')}. What else you got for me, {user_name}?"
    elif "date" in user_input:
        return f"Current date: {datetime.now().strftime('%Y-%m-%d')}. Anything fun planned, {user_name}?"
    elif "info" in user_input:
        return f"ModuChat v1.2 - Open-source by BitForge Studio. I’m here to chat or help, {user_name}!"
    elif "setname" in user_input:
        new_name = user_input.replace("setname", "").strip()
        if not new_name:
            new_name = input("Enter your name: ").strip()
        user_name = new_name
        return f"Name set to {user_name}! How can I assist you now?"
    elif "calc" in user_input:
        try:
            expression = user_input.replace("calc", "").strip()
            if not expression:
                expression = input("Enter a simple calculation (e.g., 2 + 3): ").strip()
            result = eval(expression)
            return f"Result: {result}. Pretty cool, huh, {user_name}?"
        except:
            return f"Oops, something went wrong with that calc, {user_name}. Try 'calc 2 + 3' next time!"
    # Réponses contextuelles basées sur le dernier input
    elif last_input and ("what" in last_input or "why" in last_input):
        return f"Good question, {user_name}! I’d say it’s all about perspective—what do you think?"
    elif last_input and "you" in last_input:
        return f"Me? I’m just a friendly bot here for {user_name}. What about you—what’s your story?"
    # Réponses ouvertes pour relancer
    elif "yes" in user_input or "oui" in user_input:
        return f"Cool, {user_name}! Tell me more—what’s behind that 'yes'?"
    elif "no" in user_input or "non" in user_input:
        return f"Okay, {user_name}, no worries. What’s on your mind instead?"
    else:
        # Réponses génériques avec relance
        generic_replies = [
            f"Hmm, {user_name}, I’m not sure about that one. What do you like to talk about?",
            f"Interesting! What’s next on your mind, {user_name}?",
            f"You’ve got me curious, {user_name}. Care to elaborate?"
        ]
        return random.choice(generic_replies)

def main():
    print("=====================================")
    print("Welcome to ModuChat")
    print("Created by BitForge Studio")
    print("Type 'exit' or 'bye' to quit")
    print("=====================================")

    while True:
        user_input = input(f"{user_name}: ")
        if user_input.lower() in ["exit", "bye", "au revoir"]:
            response = get_response(user_input)
            print("Bot:", response)
            break
        response = get_response(user_input)
        print("Bot:", response)
        time.sleep(0.5)  # Petite pause pour une lecture naturelle

if __name__ == "__main__":
    main()
